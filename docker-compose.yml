version: '3.8'

services:
  # MongoDB servisi
  mongodb:
    image: mongo:latest
    container_name: mongodb-service
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongouser
      - MONGO_INITDB_ROOT_PASSWORD=YourStrongPassword!*1.2.3
    restart: always
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SQL Server servisi
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver-service
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrongPassword!*1.2.3
    volumes:
      - sqlserver_data:/var/opt/mssql
    restart: always
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "YourStrongPassword!*1.2.3", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis servisi
  redis:
    image: redis:latest
    container_name: redis-service
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ServiceA mikroservisiniz
  servicea:
    build:
      context: ./ServiceA
      dockerfile: Dockerfile
    container_name: servicea
    environment:
      - ConnectionStrings:Redis=redis-service:6379
      - ConnectionStrings:MongoDb=mongodb://mongouser:YourStrongPassword!*1.2.3@mongodb-service:27017
      - ConnectionStrings:SqlServer=Server=sqlserver-service,1433;Database=HealthCheckUIDb;User Id=sa;Password=YourStrongPassword!*1.2.3;Encrypt=false;TrustServerCertificate=true;
    ports:
      - "5007:80"
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    restart: always

  # ServiceB mikroservisiniz
  serviceb:
    build:
      context: ./ServiceB
      dockerfile: Dockerfile
    container_name: serviceb
    environment:
      - ConnectionStrings:Redis=redis-service:6379
    ports:
      - "5006:80"
    depends_on:
      redis:
        condition: service_healthy
    restart: always

  # MonitoringService mikroservisiniz
  monitoringservice:
    build:
      context: ./MonitoringService
      dockerfile: Dockerfile
    container_name: monitoringservice
    ports:
      - "5005:80"
    depends_on:
      servicea:
        condition: service_started
      serviceb:
        condition: service_started
      sqlserver:
        condition: service_healthy
    restart: always

volumes:
  mongodb_data:
  sqlserver_data: